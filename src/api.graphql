scalar JSONSchema
scalar JSON
scalar JSONata
scalar DateTime

interface BaseConfig {
  id: ID!
  version: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

interface BaseResult {
  id: ID!
  success: Boolean!
  data: JSON
  error: String
  startedAt: DateTime!
  completedAt: DateTime!
}

type ApiConfig implements BaseConfig {
  # BaseConfig
  id: ID!
  version: String
  createdAt: DateTime!
  updatedAt: DateTime!

  # Specific implementation
  url: String!
  queryParams: JSON
  instruction: String!
  method: HttpMethod!
  headers: [String]
  body: String
  documentationUrl: String
  contentType: String
  responseSchema: JSONSchema!
  responseMapping: JSONata!
  authentication: Authentication
  pagination: Pagination
  dataPath: String
}

type ExtractConfig implements BaseConfig {  
  # BaseConfig
  id: ID!
  version: String
  createdAt: DateTime!
  updatedAt: DateTime!

  # Specific implementation
  url: String!
  queryParams: JSON
  instruction: String!
  method: HttpMethod!
  headers: [String]
  body: String
  documentationUrl: String
  contentType: String
  decompressionMethod: DecompressionMethod!
  authentication: Authentication
  fileType: FileType
  dataPath: String
}

type TransformConfig implements BaseConfig {
  # BaseConfig
  id: ID!
  version: String
  createdAt: DateTime!
  updatedAt: DateTime!

  # Specific implementation
  responseSchema: JSONSchema!
  responseMapping: JSONata!
}

type CallResult implements BaseResult {
  # BaseResult
  id: ID!
  success: Boolean!
  data: JSON
  error: String
  startedAt: DateTime!
  completedAt: DateTime!

  # Specific implementation
  config: ApiConfig!
}

type ExtractResult implements BaseResult {
  # BaseResult
  id: ID!
  success: Boolean!
  data: JSON
  error: String
  startedAt: DateTime!
  completedAt: DateTime!

  # Specific implementation
  config: ExtractConfig!
}

type TransformResult implements BaseResult {
  # BaseResult
  id: ID!
  success: Boolean!
  data: JSON
  error: String
  startedAt: DateTime!
  completedAt: DateTime!

  # Specific implementation
  config: TransformConfig!
}

type Authentication {
  type: AuthType!
  format: String
}

type Pagination {
  type: PaginationType!
  pageSize: Int!
}

type ResultList {
  items: [CallResult!]!
  total: Int!
}

type ApiList {
  items: [ApiConfig!]!
  total: Int!
}

type TransformList {
  items: [TransformConfig!]!
  total: Int!
}

type ExtractList {
  items: [ExtractConfig!]!
  total: Int!
}

enum AuthType {
  NONE
  HEADER
  QUERY_PARAM
  OAUTH2
}

enum DecompressionMethod {
  GZIP
  DEFLATE
  NONE
  AUTO
  ZIP
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS
}

enum CacheMode {
  ENABLED
  READONLY
  WRITEONLY
  DISABLED
}

enum PaginationType {
  OFFSET_BASED
  PAGE_BASED
  DISABLED
}

enum FileType {
  CSV
  JSON
  XML
  AUTO
}

input PaginationInput {
  type: PaginationType!
  pageSize: Int!
}

input ApiInput {
  url: String!
  queryParams: JSON
  instruction: String!
  method: HttpMethod
  headers: [String]
  body: String
  contentType: String
  documentationUrl: String
  responseSchema: JSONSchema
  responseMapping: JSONata
  authentication: AuthenticationInput
  pagination: PaginationInput
  version: String
}

input ExtractInput {
  url: String!
  queryParams: JSON
  instruction: String!
  method: HttpMethod
  headers: [String]
  body: String
  contentType: String
  documentationUrl: String
  decompressionMethod: DecompressionMethod
  fileType: FileType
  authentication: AuthenticationInput
  version: String
}

input TransformInput {
  instruction: String!
  responseSchema: JSONSchema!
  responseMapping: JSONata
  version: String
}

input AuthenticationInput {
  type: AuthType!
  format: String
}

input CallOptions {
  cacheMode: CacheMode
  timeout: Int
  retries: Int
  retryDelay: Int
  webhookUrl: String
}

type Query {
  listCalls(limit: Int = 10, offset: Int = 0): ResultList!
  listApis(limit: Int = 10, offset: Int = 0): ApiList!
  listTransforms(limit: Int = 10, offset: Int = 0): TransformList!
  listExtracts(limit: Int = 10, offset: Int = 0): ExtractList!
  
  getCall(id: ID!): CallResult
  getApi(id: ID!): ApiConfig
  getTransform(id: ID!): TransformConfig
  getExtract(id: ID!): ExtractConfig
}

type Mutation {
  call(
    endpoint: ApiInput!
    payload: JSON
    credentials: JSON
    options: CallOptions
  ): CallResult!
  
  extract(
    endpoint: ExtractInput!
    credentials: JSON
    options: CallOptions
  ): ExtractResult!
  
  transform(
    input: TransformInput!
    data: JSON!
    options: CallOptions
  ): TransformResult!
  
  updateApi(id: ID!, input: ApiInput!): ApiConfig!
  deleteApi(id: ID!): Boolean!
  
  updateExtraction(id: ID!, input: ExtractInput!): ExtractConfig!
  deleteExtraction(id: ID!): Boolean!
  
  updateTransformation(id: ID!, input: TransformInput!): TransformConfig!
  deleteTransformation(id: ID!): Boolean!
}